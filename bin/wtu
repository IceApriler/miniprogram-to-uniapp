#! /usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const path = require('path')
const fs = require('fs')
const inquirer = require('inquirer')
const updater = require('pkg-updater')
const pathUtils = require('../src/utils/pathUtils')

const { transform } = require('../index')
const pkg = require('../package.json')


async function main () {
    //检查更新
    await updater({ 'pkg': pkg })

    process.on('exit', () => console.log())

    program
        .version(pkg.version)
        // .version(pkg.version, '-v, --version')  //响应-v
        .usage('[options]')
        .option('-i, --input', 'the input path for miniprogram project')
        .option('-c, --cli', 'the type of output project is vue-cli, which default value is false', false)
        .option('-m, --merge', 'merge wxss file into vue file, which default value is false', false)
        .option('-t, --template', 'transform template and include to component, which default value is false', false)
        .option('-vant, --vant', 'transform vant component, which default value is false', true)
        .option('-ts, --typescript', 'transform typescript, which default value is false', false)
        .parse(process.argv)
        .action((arg) => {
            console.log('执行了', arg)
        })

    program.on('--help', function () {
        console.log()
        console.log('  Examples:')
        console.log()
        console.log(chalk.gray('    # transform a miniprogram project to uni-app project'))
        console.log()
        console.log('    $ wtu -i ./miniprogram-project [-m -c -t]')
        console.log()
    })

    function help () {
        if (program.args.length < 1) {
            return program.help()
        }
    }

    help()

    let input = program.args[0]
    let output = ""
    const opts = program.opts()
    //
    const options = {
        input,
        output,
        isVueAppCliMode: opts.cli,
        isMergeWxssToVue: opts.merge,
        isTemplateToComponent: opts.template,
        isTransformVant: opts.vant,
        isTransformTypescript: opts.typescript
    }
    //
    input = path.resolve(process.cwd(), input)

    if (!fs.existsSync(input)) {
        console.error(`【ERROR】输入目录${input}不存在，请重新输入要转换的小程序目录`)
        process.exit()
    }

    //获取输入目录
    input = pathUtils.getInputFolder(input)

    //获取输出目录
    output = pathUtils.getOutputFolder(input, options.isVueAppCliMode)

    //输出目录不为空时
    if (!pathUtils.isEmptyFolder(output)) {
        let params = []
        params.push({
            type: 'confirm',
            name: 'overwrite',
            default:false, //默认值为false (直接按回车时，也设为false)
            message: '输出目录非空，执行此操作将会替换原有文件，确定要继续转换吗？',
        })
        const answer = await inquirer.prompt(params)

        //不同意则停止转换
        if (!answer.overwrite) {
            console.log(`输出目录非空，停止转换~`)
            process.exit()
        }
    }

    transform(input, options)
}

main()

